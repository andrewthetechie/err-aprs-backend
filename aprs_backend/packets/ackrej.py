# Parses packets to check for new ackrej format packets
import re

import logging

log = logging.getLogger(__name__)


def parse_ack_rej_msg_id(message: str) -> tuple[str | None, str | None, str | None, str | None]:
    """Parses the "new" (1999) ackrej message format. APRSlib doesn't
    handle it very well

    Args:
        message (str): APRS message text to be parsed. If this text contains
        the new ack/rej message as _sole_ data, then the response_text field
        will be populated with the ack/rej, the message numbers will be assigned
        and the message_text itself will be None. Otherwise, the original
        message text will be returned

    Returns:
        tuple[str, str, str, str]:
            message: str | None - original message text or None if message was an ack/rej
            response: str | None - ack, rej, or None
            sender_message_id: str | None - Sender's message ID or None
            err_message_id: str | None - message id for a message from te bot or None
    """
    matches = re.search(r"^(ack|rej)(..)}(..)$", message, re.IGNORECASE)
    response = None
    sender_message_id = None
    err_message_id = None
    if matches:
        response = matches[1]
        sender_message_id = matches[2]
        err_message_id = matches[3]
        message = None
    log.debug("Message: %s response: %s sender_message_id: %s, err_message_id: %s", message, response, sender_message_id, err_message_id)
    return message, response


def parse_new_ackrej_format(message: str) -> tuple[str | None, str | None, bool]:
    """
    Have a look at the incoming APRS message and check if it
    contains a message no which does not follow the APRS
    standard (see aprs101.pdf chapter 14)

    http://www.aprs.org/aprs11/replyacks.txt

    but rather follow the new format

    http://www.aprs.org/aprs11/replyacks.txt

    Parameters
    ==========
    message_text: 'str'
        The original aprs message as originally extracted by aprslib

    Returns
    =======
    msg: 'str'
        original message OR the modified message minus message no and trailing
        data
    msg_no: 'str'
        Null if no message_no was present
    new_ackrej_format: 'bool'
        True if the ackrej_format has to follow the new ack-rej handling
        process as described in http://www.aprs.org/aprs11/replyacks.txt
    """

    """
    The following assumptions apply when handling APRS messages in general:

    Option 1: no message ID present:
        send no ACK
        outgoing messages have no msg number attachment

            Example data exchange 1:
            DF1JSL-4>APRS,TCPIP*,qAC,T2PRT::WXBOT    :94043
            WXBOT>APRS,qAS,KI6WJP::DF1JSL-4 :Mountain View CA. Today,Sunny High 60

            Example data exchange 2:
            DF1JSL-4>APRS,TCPIP*,qAC,T2SPAIN::EMAIL-2  :jsl24469@gmail.com Hallo
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :Email sent to jsl24469@gmail.com


    Option 2: old message number format is present: (example: msg{12345)
        Send ack with message number from original message (ack12345)
        All outgoing messages have trailing msg number ( {abcde ); can be numeric or
        slphanumeric counter. See aprs101.pdf chapter 14

            Example data exchange 1:
            DF1JSL-4>APRS,TCPIP*,qAC,T2SP::EMAIL-2  :jsl24469@gmail.com Hallo{12345
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :ack12345
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :Email sent to jsl24469@gmail.com{891
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::EMAIL-2  :ack891

            Example data exchange 2:
            DF1JSL-4>APRS,TCPIP*,qAC,T2CSNGRAD::EMAIL-2  :jsl24469@gmail.com{ABCDE
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :ackABCDE
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :Email sent to jsl24469@gmail.com{893
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::EMAIL-2  :ack893


    Option 3: new messages with message ID but without trailing retry msg ids: msg{AB}
        Do NOT send extra ack
        All outgoing messages have 2-character msg id, followed by message ID from original message
        Example:
        User sends message "Hello{AB}" to MPAD
        MPAD responds "Message content line 1{DE}AB" to user
        MPAD responds "Message content line 2{DF}AB" to user

        AB -> original message
        DE, DF -> message IDs generated by MPAD

            Example data exchange 1:
            DF1JSL-4>APRS,TCPIP*,qAC,T2NUERNBG::WXBOT    :99801{AB}
            WXBOT>APRS,qAS,KI6WJP::DF1JSL-4 :Lemon Creek AK. Today,Scattered Rain/Snow and Patchy Fog 50% High 4{QL}AB
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::WXBOT    :ackQL}AB
            WXBOT>APRS,qAS,KI6WJP::DF1JSL-4 :0{QM}AB
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::WXBOT    :ackQM}AB

            Example data exchange 2:
            DF1JSL-4>APRS,TCPIP*,qAC,T2SPAIN::EMAIL-2  :jsl24469@gmail.com Hallo{AB}
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :Email sent to jsl24469@gmail.com{OQ}AB
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::EMAIL-2  :ackOQ}AB


    Option 4: new messages with message ID and with trailing retry msg ids: msg{AB}CD
        We don't handle retries - therefore, apply option #3 for processing these
        the "CD" part gets omitted and is not used

            Example data exchange 1:
            DF1JSL-4>APRS,TCPIP*,qAC,T2CZECH::WXBOT    :99801{LM}AA
            WXBOT>APRS,qAS,KI6WJP::DF1JSL-4 :Lemon Creek AK. Today,Scattered Rain/Snow and Patchy Fog 50% High 4{QP}LM
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::WXBOT    :ackQP}LM
            WXBOT>APRS,qAS,KI6WJP::DF1JSL-4 :0{QQ}LM
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::WXBOT    :ackQQ}LM

            Example data exchange 2:
            DF1JSL-4>APRS,TCPIP*,qAC,T2SP::EMAIL-2  :jsl24469@gmail.com Welt{DE}FG
            EMAIL-2>APJIE4,TCPIP*,qAC,AE5PL-JF::DF1JSL-4 :Email sent to jsl24469@gmail.com{OS}DE
            DF1JSL-4>APOSB,TCPIP*,qAS,DF1JSL::EMAIL-2  :ackOS}DE

    """

    msg = msgno = None
    new_ackrej_format = False

    # if message text is present, split up between aaaaaa{bb}cc
    # where aaaaaa = message text
    # bb = message number
    # cc = message retry (may or may not be present)
    if message:
        matches = re.search(
            r"^(.*){([a-zA-Z0-9]{2})}(\w*)$", message, re.IGNORECASE
        )
        if matches:
            try:
                msg = matches[1].rstrip()
                msgno = matches[2]
                new_ackrej_format = True
            except IndexError:
                msg = message
                msgno = None
                new_ackrej_format = False
        else:
            msg = message
    else:
        msg = message
    return msg, msgno, new_ackrej_format
